SVN:
----
|
|-- trunk
|-- milestones
|-- branches

The trunk/ is for the latest version of code.  It should be functional code.
If one wishes to work off the trunk/, one should cut a new branch.  Milestones
are essentially "tagged" versions, but before the first real version.  They are
serially numbered.  Branches are based off of milestones, and should be numbered
mX-Y where 'm' is literal, 'X' is the milestone number and 'Y' is serially numbered.


TRUNK DIRECTORIES:
------------------
|
|-- bin                         (directory for Make support scripts)
|-- boot                        (directory for bootloading support)
|-- docs                        (document directory)
|-- i386-obj                    (object files for build against i386-elf)
|-- include                     (C header files)
|-- kmain.c                     (C kernel entry point, called from start.asm)
|-- lcheck                      (local C unit test suite)
|-- link                        (ld linker scripts)
|-- mnt                         (local mount dir for building boot images)
|-- src                         (other C sources)
|-- start.asm                   (kernel entry point from boot loader)
|-- test                        (test files and scripts)
|-- tests                       (lcheck unit tests)
|-- vm                          (built virtual machine images)


TRUNK DIRECTORIES AND FILES:
----------------------------
|
|-- Makefile                    (root Makefile)
|-- bin                         (directory for Make support scripts)
|   `-- mkimgdisk.example           (used to create VM disks for boot kernel -- MUST DEFINE FOR LOCAL ENV)
|   `-- mkimgdisk.macosx.example    (used to create VM disks for boot kernel on OSX with MacFuse)
|-- boot                        (directory for bootloading support)
|   `-- kos-silly-loader.asm        (silly 32-bit protected mode boot loader; not fully-functional)
|-- docs                        (document directory)
|   `-- directories.txt             (this file)
|   `-- overview.txt                (overview of K-OS)
|   `-- where-to-start.txt          (brief on where to look for code)
|-- i386-obj                    (object files for build against i386-elf)
|-- include                     (C header files)
|   `-- input                       (Device input methods)
|       `-- keyboard.h                  (keyboard driver header)
|   `-- memory                      (Memory handling and allocation)
|       `-- kmalloc.h                   (kernel rudimentary memory allocator header)
|   `-- math.h                      (math routines)
|   `-- multiboot.h                 (GNU multiboot format definitions and structs)
|   `-- platform                    (platform specific code)
|       `-- ia-32                       (IA-32 processor specific code)
|           `-- asm.h                       (assembly macro definitions)
|           `-- boot.h                      (IDT and GDT structures and function definitions)
|           `-- cpu.h                       (CPU specific functions for ia-32, including cpuid)
|           `-- idt.h                       (Interrupt Descriptor Table header)
|           `-- irq.h                       (Interrupt ReQuest routines header)
|           `-- isrs.h                      (Interrupt Service Routines header)
|           `-- pic.h                       (Programmable Interrupt Controller header)
|   `-- stdlib                      (roughly, C stdlib)
|       `-- stdio.h                     (stdio header)
|   `-- string.h                    (string handling routines)
|   `-- sys                         (system definitions)
|       `-- types.h                     (standardization of type sizes)
|   `-- video                       (video output definitions and function)
|       `-- kterm.h                     (kernel "terminal")
|       `-- vga.h                       (VGA header)
|-- kmain.c                     (C kernel entry point, called from start.asm)
|-- kosh                        (K-OS Kernel Shell)
|   `-- Makefile                    (KoSH Makefile)
|   `-- koshlib.h                   (KoSH library routines header file)
|   `-- lib                         (KoSH library sources)
|       `-- koshlib.c                   (KoSH library source file)
|   `-- src                         (KoSH sources)
|       `-- kosh.c                      (KoSH source)
|   `-- tests                       (KoSH lcheck unit tests)
|       `-- Makefile                    (KoSH unit test Makefile)
|       `-- check_kosh_extract_reg_or_mem.c     (KoSH unit test for extract_reg_or_mem() function)
|       `-- check_kosh_input_to_instruction.c   (KoSH unit test for input_to_instruction() function)
|       `-- check_kosh_match_register.c         (KoSH unit test for match_register() function)
|       `-- check_kosh_next_word.c              (KoSH unit test for next_word() function)
|-- lcheck                      (local C unit test suite)
|   `-- Makefile                    (unit test suite Makefile)
|   `-- lcheck.c                    (unit test suite source)
|   `-- lcheck.h                    (unit test suite header)
|-- link                        (ld linker scripts)
|   `-- kmain.ld                    (kernel entry linker script)
|-- mnt                         (local mount dir for building boot images)
|-- src                         (primary source files)
|   `-- input                       (Device input sources)
|       `-- keyboard.c                  (keyboard driver)
|   `-- memory                      (Memory handling and allocation)
|       `-- kmalloc.c                   (kernel rudimentary memory allocator)
|   `-- math.h                      (math routines)
|   `-- multiboot.c                 (routines for getting information from Multiboot datastructures)
|   `-- platform                    (platform specific code)
|       `-- ia-32                       (IA-32 processor specific code)
|           `-- asm.c                       (inline assembly routines)
|           `-- cpu.c                       (C functions for cpuid and CPU specific operations)
|           `-- cpuid.asm                   (Assembly routines needed for cpuid operations)
|           `-- gdt.c                       (Global Descriptor Table routines)
|           `-- idt.c                       (Interrupt Descriptor Table routines)
|           `-- idt_handlers.asm            (Assembly routines for configuring IDT)
|           `-- irq.c                       (Interrupt ReQuest routines)
|           `-- irq_handlers.asm            (Interrupt ReQuest assembly handlers)
|           `-- isr_handlers.asm            (Interrupt Service Routines handoff from assembly)
|           `-- isrs.c                      (Interrupt Service Routines)
|           `-- pic.c                       (Programmable Interrupt Controller routines)
|           `-- pit.c                       (Programmable Interval Timer routines)
|   `-- stdlib                      (roughly, C stdlib)
|       `-- Makefile                    (C stdlib Makefile)
|       `-- cprintf.c                   (generic printf routine)
|       `-- stdio.c                     (stdio routines)
|   `-- string.c                    (string handling routines)
|   `-- video                       (video output definitions and function)
|       `-- kterm.c                     (kernel "terminal")
|       `-- vga.c                       (VGA header)
|-- start.asm                   (kernel entry point from boot loader)
|-- tests                       (lcheck unit tests for kernel)
|   `-- Makefile                    (lcheck kernel unit tests Makefile)
|   `-- test_cprintf.c              (lcheck unit tests for cprintf routine)
|   `-- test_kmalloc.c              (lcheck unit tests for kmalloc routines)
|   `-- test_kterm.c                (lcheck unit tests for kterm routines)
|   `-- test_kterm_readline.c       (lcheck unit tests for kterm_window_readline function)
|   `-- test_strntolower.c          (lcheck unit tests for string.c strntolower function)
|-- vm                          (Repository for virtual machine images)
|   `-- ext2.flp                    (EXT2 fs floppy image)
